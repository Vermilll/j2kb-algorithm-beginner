이론정리
https://www.notion.so/3-fc47a6df695d430aa221638026888866?pvs=4


//스택 - 10828
//c++에서는 STL에서 stack이 구현 되어있어서 이를 이용.

#include<iostream>
#include<stack>
#include<string>
 
using namespace std;
 
int main(void){
    int n;
    cin >> n;
    
    stack<int> st; //int type의 stack 선언. 
    string str;
 
    for(int i=0; i<n; i++) {
        cin >> str;
 
        if (str == "push") { //push 명령어 일때. 
 
            int num;
            cin >> num;
            st.push(num);
 
        } else if (str == "pop") {    //pop 명령어 일때. 
 
            if (!st.empty()) {
                cout << st.top() << endl;
                st.pop();
            } else {
                cout << "-1" << endl;
            }
 
        } else if (str == "size") {        //size 명령어 일때. 
 
            cout << st.size() << endl;
 
        } else if (str == "empty") {    //empty 명령어 일때. 
 
            if (st.empty()) {
                cout << "1" << endl;
            } else {
                cout << "0" << endl;
            }
 
        } else if (str == "top") {        //top 명령어 일때. 
 
            if (!st.empty()) {
                cout << st.top() << endl;
            } else {
                cout << "-1" << endl;
            }
 
        }
 
    }
    return 0;
}


//큐 - 문제 10845
string str;
		cin >> str;
		
		if(str=="push"){
			int X;
			cin >> X;
			Q.push(X);
		}
		
		else if(str=="pop"){
			if(!Q.empty()){
				cout << Q.front() << "\n";
				Q.pop();
			}
			else
				cout << "-1\n";
		}
		
		else if(str=="size"){
			cout << Q.size() << "\n";
		}
		
		else if(str=="empty"){
			cout << Q.empty() << "\n";
		}
		
		else if(str=="front"){
			if(!Q.empty()){
				cout << Q.front() << "\n";	
			}
			else
				cout << "-1\n";
		}
		
		else if(str=="back"){
			if(!Q.empty()){
				cout << Q.back() << "\n";	
			}
			else
				cout << "-1\n";
		}
		
	}
	
	return 0;
}

//덱 - 문제10866
#include <iostream>
#include <deque>
#include <string>

using namespace std;

int main(int argc, char**argv) {

	ios::sync_with_stdio(0);
	cin.tie(0);
		
	deque<int> DQ;
	int N;
	
	cin >> N;
	
	while(N--){
		string str;
		cin >> str;
		
		if(str=="push_front"){
			int X;
			cin >> X;
			DQ.push_front(X);
		}
		
		else if(str=="push_back"){
			int X;
			cin >> X;
			DQ.push_back(X);
		}
		
		else if(str=="pop_front"){
			if(!DQ.empty()){
				cout << DQ.front() <<"\n";
				DQ.pop_front();
			}
			else
				cout << "-1\n";
		}
		
		else if(str=="pop_back"){
			if(!DQ.empty()){
				cout << DQ.back()<<"\n";
				DQ.pop_back();
			}
			else
				cout << "-1\n";
		}
		
		else if(str=="size"){
			cout << DQ.size() <<"\n";
		}
		
		else if(str=="empty"){
			cout << DQ.empty() <<"\n";
		}
		
		else if(str=="front"){
			if(!DQ.empty()){
				cout << DQ.front() <<"\n";
			}
			else
				cout << "-1\n";
		}
		
		else if(str=="back"){
			if(!DQ.empty()){
				cout << DQ.back() <<"\n";
			}
			else
				cout << "-1\n";
		}
	}		
	return 0;
}



//최소 힙 - 문제1927
//벡터 코드로 하면 시간초과가 뜬다. 따라서 우선 순위 큐를 사용하여 코드를 작성하면 코드도 간결해지고 시간도 단축된다.

#include <iostream>
#include <queue>
using namespace std;

priority_queue <int, vector <int>, greater <int>> q;

int main() {
	ios::sync_with_stdio(false);
	cin.tie(NULL);

	int n, num;
	cin >> n;

	for (int i = 0; i < n; i++) {
		cin >> num;
		if (num != 0) {
			q.push(num);
		}
		else {
			if (q.empty()) {
				cout << 0 << "\n";
			}
			else {
				cout << q.top() << "\n";
				q.pop();
			}
		}
	}
	return 0;
}


//절대값 힙 - 11286번
//우선순위 큐를 먼저 선언하고 비교 연산자를 호출하여 절댓값이 작은 것이 우선순위가 되도록 swap 함.만약 절대값이 같은 경우, 둘 중 값이 작은 것이 우선순위가 되도록 swap

#include<iostream>
#include<queue>
#include<deque>
#include<string.h>
#include<math.h>
#include<cmath>
#include<stack>
#include<algorithm>

using namespace std;

struct cmp {
	bool operator()(int a, int b) {
		if (abs(a) == abs(b)) { // ab의 절대값이 같은 경우
			if (a > b) { // a가 양수 b가 음수일 경우
				return a > b; // true
			}
			else return b < a; // b가 양수 a가 음수일 경우 false
		}
		return abs(a) > abs(b); // 절대값이 작은 순서대로
	}
};

int main() {
	int n;
	priority_queue <int,vector<int>, cmp> pq;
	cin >> n;
	for (int i = 1; i <= n; i++) {
		int x;
		cin >> x;
		if (x == 0) {
			if (pq.empty()) { // 큐가 비었다면
				cout << 0 << endl; // 0
			}
			else {
				cout << pq.top() << endl;
				pq.pop();
			}
		
		}
		else {
			pq.push(x);
		}
		
		
	}
}
